"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([[547],{

/***/ 60547:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  CalciteFlowItem: () => (/* binding */ CalciteFlowItem),\n  defineCustomElement: () => (/* binding */ calcite_flow_item_defineCustomElement)\n});\n\n// EXTERNAL MODULE: ./node_modules/@stencil/core/internal/client/index.js + 1 modules\nvar client = __webpack_require__(77210);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/dom.js\nvar dom = __webpack_require__(79145);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/interactive.js\nvar interactive = __webpack_require__(64426);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/loadable.js\nvar loadable = __webpack_require__(16265);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/locale.js\nvar locale = __webpack_require__(19417);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/t9n.js\nvar t9n = __webpack_require__(53801);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/observers.js\nvar observers = __webpack_require__(85545);\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/array.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\nfunction getRoundRobinIndex(index, total) {\n  return (index + total) % total;\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/guid.js\nvar guid = __webpack_require__(96472);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/key.js\nvar components_key = __webpack_require__(25694);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/action.js\nvar action = __webpack_require__(19516);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/icon.js\nvar icon = __webpack_require__(44586);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/loader.js\nvar loader = __webpack_require__(92708);\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/floating-ui.js\nvar floating_ui = __webpack_require__(14285);\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/focusTrapComponent.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\n/*!\n* focus-trap 7.5.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !(0,dom.D)(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = (0,dom.y)(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = (0,dom.z)(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return (0,dom.A)(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return (0,dom.A)(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return (0,dom.B)(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return (0,dom.A)(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return (0,dom.A)(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n      event = _ref2.event,\n      _ref2$isBackward = _ref2.isBackward,\n      isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || (0,dom.D)(target, config.tabbableOptions) && !(0,dom.A)(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = (0,dom.B)(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || (0,dom.D)(target, config.tabbableOptions) && !(0,dom.A)(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = (0,dom.B)(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if ((0,dom.B)(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return (0,dom.B)(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 ? void 0 : onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 ? void 0 : onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\n/**\n * This module allows custom configuration for components.\n */\nconst customConfig = globalThis[\"calciteConfig\"];\nconst focusTrapStack = customConfig?.focusTrapStack || [];\n\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param options\n */\nfunction connectFocusTrap(component, options) {\n  const { el } = component;\n  const focusTrapNode = options?.focusTrapEl || el;\n  if (!focusTrapNode) {\n    return;\n  }\n  const focusTrapOptions = {\n    clickOutsideDeactivates: true,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapNode,\n    setReturnFocus: (el) => {\n      (0,dom.k)(el);\n      return false;\n    },\n    ...options?.focusTrapOptions,\n    // the following options are not overridable\n    document: el.ownerDocument,\n    tabbableOptions: dom.E,\n    trapStack: focusTrapStack,\n  };\n  component.focusTrap = createFocusTrap(focusTrapNode, focusTrapOptions);\n}\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap activate options.\n */\nfunction activateFocusTrap(component, options) {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate(options);\n  }\n}\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap deactivate options.\n */\nfunction deactivateFocusTrap(component, options) {\n  component.focusTrap?.deactivate(options);\n}\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nfunction updateFocusTrapElements(component) {\n  component.focusTrap?.updateContainerElements(component.el);\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/openCloseComponent.js\nvar openCloseComponent = __webpack_require__(18811);\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/Heading.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\nfunction constrainHeadingLevel(level) {\n  return Math.min(Math.max(Math.ceil(level), 1), 6);\n}\nconst Heading = (props, children) => {\n  const HeadingTag = props.level ? `h${props.level}` : \"div\";\n  delete props.level;\n  return (0,client.h)(HeadingTag, { ...props }, children);\n};\n\n\n\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/FloatingArrow.js\nvar FloatingArrow = __webpack_require__(53320);\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/popover.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst CSS = {\n  container: \"container\",\n  imageContainer: \"image-container\",\n  closeButtonContainer: \"close-button-container\",\n  closeButton: \"close-button\",\n  content: \"content\",\n  hasHeader: \"has-header\",\n  header: \"header\",\n  headerContent: \"header-content\",\n  heading: \"heading\",\n};\nconst defaultPopoverPlacement = \"auto\";\nconst ARIA_CONTROLS = \"aria-controls\";\nconst ARIA_EXPANDED = \"aria-expanded\";\n\nclass PopoverManager {\n  constructor() {\n    // --------------------------------------------------------------------------\n    //\n    //  Private Properties\n    //\n    // --------------------------------------------------------------------------\n    this.registeredElements = new Map();\n    this.registeredElementCount = 0;\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.queryPopover = (composedPath) => {\n      const { registeredElements } = this;\n      const registeredElement = composedPath.find((pathEl) => registeredElements.has(pathEl));\n      return registeredElements.get(registeredElement);\n    };\n    this.togglePopovers = (event) => {\n      const composedPath = event.composedPath();\n      const togglePopover = this.queryPopover(composedPath);\n      if (togglePopover && !togglePopover.triggerDisabled) {\n        togglePopover.open = !togglePopover.open;\n      }\n      Array.from(this.registeredElements.values())\n        .filter((popover) => popover !== togglePopover && popover.autoClose && popover.open && !composedPath.includes(popover))\n        .forEach((popover) => (popover.open = false));\n    };\n    this.keyHandler = (event) => {\n      if (event.defaultPrevented) {\n        return;\n      }\n      if (event.key === \"Escape\") {\n        this.closeAllPopovers();\n      }\n      else if ((0,components_key.i)(event.key)) {\n        this.togglePopovers(event);\n      }\n    };\n    this.clickHandler = (event) => {\n      if ((0,dom.j)(event)) {\n        this.togglePopovers(event);\n      }\n    };\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n  registerElement(referenceEl, popover) {\n    this.registeredElementCount++;\n    this.registeredElements.set(referenceEl, popover);\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n  unregisterElement(referenceEl) {\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n  closeAllPopovers() {\n    Array.from(this.registeredElements.values()).forEach((popover) => (popover.open = false));\n  }\n  addListeners() {\n    document.addEventListener(\"pointerdown\", this.clickHandler, { capture: true });\n    document.addEventListener(\"keydown\", this.keyHandler, { capture: true });\n  }\n  removeListeners() {\n    document.removeEventListener(\"pointerdown\", this.clickHandler, { capture: true });\n    document.removeEventListener(\"keydown\", this.keyHandler, { capture: true });\n  }\n}\n\nconst popoverCss = \":host{--calcite-floating-ui-z-index:var(--calcite-popover-z-index, var(--calcite-app-z-index-popup));display:block;position:absolute;z-index:var(--calcite-floating-ui-z-index)}.calcite-floating-ui-anim{position:relative;transition:var(--calcite-floating-ui-transition);transition-property:transform, visibility, opacity;opacity:0;box-shadow:0 0 16px 0 rgba(0, 0, 0, 0.16);z-index:var(--calcite-app-z-index);border-radius:0.25rem}:host([data-placement^=bottom]) .calcite-floating-ui-anim{transform:translateY(-5px)}:host([data-placement^=top]) .calcite-floating-ui-anim{transform:translateY(5px)}:host([data-placement^=left]) .calcite-floating-ui-anim{transform:translateX(5px)}:host([data-placement^=right]) .calcite-floating-ui-anim{transform:translateX(-5px)}:host([data-placement]) .calcite-floating-ui-anim--active{opacity:1;transform:translate(0)}:host([calcite-hydrated-hidden]){visibility:hidden !important;pointer-events:none}.calcite-floating-ui-arrow{pointer-events:none;position:absolute;z-index:calc(var(--calcite-app-z-index) * -1);fill:var(--calcite-ui-foreground-1)}.calcite-floating-ui-arrow__stroke{stroke:var(--calcite-ui-border-3)}:host([scale=s]) .heading{padding-inline:0.75rem;padding-block:0.5rem;font-size:var(--calcite-font-size--1);line-height:1.375}:host([scale=m]) .heading{padding-inline:1rem;padding-block:0.75rem;font-size:var(--calcite-font-size-0);line-height:1.375}:host([scale=l]) .heading{padding-inline:1.25rem;padding-block:1rem;font-size:var(--calcite-font-size-1);line-height:1.375}:host{pointer-events:none}:host([open]){pointer-events:initial}.calcite-floating-ui-anim{border-radius:0.25rem;border-width:1px;border-style:solid;border-color:var(--calcite-ui-border-3);background-color:var(--calcite-ui-foreground-1)}.arrow::before{outline:1px solid var(--calcite-ui-border-3)}.header{display:flex;flex:1 1 auto;align-items:stretch;justify-content:flex-start;border-width:0px;border-block-end-width:1px;border-style:solid;border-block-end-color:var(--calcite-ui-border-3)}.heading{margin:0px;display:block;flex:1 1 auto;align-self:center;white-space:normal;font-weight:var(--calcite-font-weight-medium);color:var(--calcite-ui-text-1);word-wrap:break-word;word-break:break-word}.container{position:relative;display:flex;block-size:100%;flex-direction:row;flex-wrap:nowrap;border-radius:0.25rem;color:var(--calcite-ui-text-1)}.container.has-header{flex-direction:column}.content{display:flex;block-size:100%;inline-size:100%;flex-direction:column;flex-wrap:nowrap;align-self:center;word-wrap:break-word;word-break:break-word}.close-button-container{display:flex;overflow:hidden;flex:0 0 auto;border-start-end-radius:0.25rem;border-end-end-radius:0.25rem}::slotted(calcite-panel),::slotted(calcite-flow){block-size:100%}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst manager = new PopoverManager();\nconst Popover = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calcitePopoverBeforeClose = (0,client/* createEvent */.yM)(this, \"calcitePopoverBeforeClose\", 6);\n    this.calcitePopoverClose = (0,client/* createEvent */.yM)(this, \"calcitePopoverClose\", 6);\n    this.calcitePopoverBeforeOpen = (0,client/* createEvent */.yM)(this, \"calcitePopoverBeforeOpen\", 6);\n    this.calcitePopoverOpen = (0,client/* createEvent */.yM)(this, \"calcitePopoverOpen\", 6);\n    this.mutationObserver = (0,observers.c)(\"mutation\", () => this.updateFocusTrapElements());\n    this.guid = `calcite-popover-${(0,guid.g)()}`;\n    this.openTransitionProp = \"opacity\";\n    this.hasLoaded = false;\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.setTransitionEl = (el) => {\n      this.transitionEl = el;\n    };\n    this.setFilteredPlacements = () => {\n      const { el, flipPlacements } = this;\n      this.filteredFlipPlacements = flipPlacements\n        ? (0,floating_ui.f)(flipPlacements, el)\n        : null;\n    };\n    this.setUpReferenceElement = (warn = true) => {\n      this.removeReferences();\n      this.effectiveReferenceElement = this.getReferenceElement();\n      (0,floating_ui.c)(this, this.effectiveReferenceElement, this.el);\n      const { el, referenceElement, effectiveReferenceElement } = this;\n      if (warn && referenceElement && !effectiveReferenceElement) {\n        console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n          el,\n        });\n      }\n      this.addReferences();\n    };\n    this.getId = () => {\n      return this.el.id || this.guid;\n    };\n    this.setExpandedAttr = () => {\n      const { effectiveReferenceElement, open } = this;\n      if (!effectiveReferenceElement) {\n        return;\n      }\n      if (\"setAttribute\" in effectiveReferenceElement) {\n        effectiveReferenceElement.setAttribute(ARIA_EXPANDED, (0,dom.t)(open));\n      }\n    };\n    this.addReferences = () => {\n      const { effectiveReferenceElement } = this;\n      if (!effectiveReferenceElement) {\n        return;\n      }\n      const id = this.getId();\n      if (\"setAttribute\" in effectiveReferenceElement) {\n        effectiveReferenceElement.setAttribute(ARIA_CONTROLS, id);\n      }\n      manager.registerElement(effectiveReferenceElement, this.el);\n      this.setExpandedAttr();\n    };\n    this.removeReferences = () => {\n      const { effectiveReferenceElement } = this;\n      if (!effectiveReferenceElement) {\n        return;\n      }\n      if (\"removeAttribute\" in effectiveReferenceElement) {\n        effectiveReferenceElement.removeAttribute(ARIA_CONTROLS);\n        effectiveReferenceElement.removeAttribute(ARIA_EXPANDED);\n      }\n      manager.unregisterElement(effectiveReferenceElement);\n    };\n    this.hide = () => {\n      this.open = false;\n    };\n    this.storeArrowEl = (el) => {\n      this.arrowEl = el;\n      this.reposition(true);\n    };\n    this.autoClose = false;\n    this.closable = false;\n    this.flipDisabled = false;\n    this.focusTrapDisabled = false;\n    this.pointerDisabled = false;\n    this.flipPlacements = undefined;\n    this.heading = undefined;\n    this.headingLevel = undefined;\n    this.label = undefined;\n    this.messageOverrides = undefined;\n    this.messages = undefined;\n    this.offsetDistance = floating_ui.b;\n    this.offsetSkidding = 0;\n    this.open = false;\n    this.overlayPositioning = \"absolute\";\n    this.placement = defaultPopoverPlacement;\n    this.referenceElement = undefined;\n    this.scale = \"m\";\n    this.triggerDisabled = false;\n    this.effectiveLocale = \"\";\n    this.floatingLayout = \"vertical\";\n    this.effectiveReferenceElement = undefined;\n    this.defaultMessages = undefined;\n  }\n  handleFocusTrapDisabled(focusTrapDisabled) {\n    if (!this.open) {\n      return;\n    }\n    focusTrapDisabled ? deactivateFocusTrap(this) : activateFocusTrap(this);\n  }\n  flipPlacementsHandler() {\n    this.setFilteredPlacements();\n    this.reposition(true);\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  offsetDistanceOffsetHandler() {\n    this.reposition(true);\n  }\n  offsetSkiddingHandler() {\n    this.reposition(true);\n  }\n  openHandler(value) {\n    (0,openCloseComponent.o)(this);\n    if (value) {\n      this.reposition(true);\n    }\n    this.setExpandedAttr();\n  }\n  overlayPositioningHandler() {\n    this.reposition(true);\n  }\n  placementHandler() {\n    this.reposition(true);\n  }\n  referenceElementHandler() {\n    this.setUpReferenceElement();\n    this.reposition(true);\n  }\n  effectiveLocaleChange() {\n    (0,t9n.u)(this, this.effectiveLocale);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n  connectedCallback() {\n    this.setFilteredPlacements();\n    (0,locale.c)(this);\n    (0,t9n.c)(this);\n    this.setUpReferenceElement(this.hasLoaded);\n    connectFocusTrap(this);\n    if (this.open) {\n      (0,openCloseComponent.o)(this);\n    }\n  }\n  async componentWillLoad() {\n    await (0,t9n.s)(this);\n    (0,loadable.a)(this);\n  }\n  componentDidLoad() {\n    (0,loadable.s)(this);\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n    this.reposition();\n    this.hasLoaded = true;\n  }\n  disconnectedCallback() {\n    this.removeReferences();\n    (0,locale.d)(this);\n    (0,t9n.d)(this);\n    (0,floating_ui.a)(this, this.effectiveReferenceElement, this.el);\n    deactivateFocusTrap(this);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  async reposition(delayed = false) {\n    const { el, effectiveReferenceElement, placement, overlayPositioning, flipDisabled, filteredFlipPlacements, offsetDistance, offsetSkidding, arrowEl, } = this;\n    return (0,floating_ui.r)(this, {\n      floatingEl: el,\n      referenceEl: effectiveReferenceElement,\n      overlayPositioning,\n      placement,\n      flipDisabled,\n      flipPlacements: filteredFlipPlacements,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n      type: \"popover\",\n    }, delayed);\n  }\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  async setFocus() {\n    await (0,loadable.c)(this);\n    (0,client/* forceUpdate */.xE)(this.el);\n    (0,dom.f)(this.el);\n  }\n  /**\n   * Updates the element(s) that are used within the focus-trap of the component.\n   */\n  async updateFocusTrapElements() {\n    updateFocusTrapElements(this);\n  }\n  getReferenceElement() {\n    const { referenceElement, el } = this;\n    return ((typeof referenceElement === \"string\"\n      ? (0,dom.q)(el, { id: referenceElement })\n      : referenceElement) || null);\n  }\n  onBeforeOpen() {\n    this.calcitePopoverBeforeOpen.emit();\n  }\n  onOpen() {\n    this.calcitePopoverOpen.emit();\n    activateFocusTrap(this);\n  }\n  onBeforeClose() {\n    this.calcitePopoverBeforeClose.emit();\n  }\n  onClose() {\n    this.calcitePopoverClose.emit();\n    deactivateFocusTrap(this);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n  renderCloseButton() {\n    const { messages, closable } = this;\n    return closable ? ((0,client.h)(\"div\", { class: CSS.closeButtonContainer, key: CSS.closeButtonContainer }, (0,client.h)(\"calcite-action\", { appearance: \"transparent\", class: CSS.closeButton, onClick: this.hide, scale: this.scale, text: messages.close,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: (closeButtonEl) => (this.closeButtonEl = closeButtonEl) }, (0,client.h)(\"calcite-icon\", { icon: \"x\", scale: this.scale === \"l\" ? \"m\" : this.scale })))) : null;\n  }\n  renderHeader() {\n    const { heading, headingLevel } = this;\n    const headingNode = heading ? ((0,client.h)(Heading, { class: CSS.heading, level: headingLevel }, heading)) : null;\n    return headingNode ? ((0,client.h)(\"div\", { class: CSS.header, key: CSS.header }, headingNode, this.renderCloseButton())) : null;\n  }\n  render() {\n    const { effectiveReferenceElement, heading, label, open, pointerDisabled, floatingLayout } = this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n    const arrowNode = !pointerDisabled ? ((0,client.h)(FloatingArrow.F, { floatingLayout: floatingLayout, key: \"floating-arrow\",\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.storeArrowEl })) : null;\n    return ((0,client.h)(client/* Host */.AA, { \"aria-hidden\": (0,dom.t)(hidden), \"aria-label\": label, \"aria-live\": \"polite\", \"calcite-hydrated-hidden\": hidden, id: this.getId(), role: \"dialog\" }, (0,client.h)(\"div\", { class: {\n        [floating_ui.F.animation]: true,\n        [floating_ui.F.animationActive]: displayed,\n      },\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.setTransitionEl }, arrowNode, (0,client.h)(\"div\", { class: {\n        [CSS.hasHeader]: !!heading,\n        [CSS.container]: true,\n      } }, this.renderHeader(), (0,client.h)(\"div\", { class: CSS.content }, (0,client.h)(\"slot\", null)), !heading ? this.renderCloseButton() : null))));\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  get el() { return this; }\n  static get watchers() { return {\n    \"focusTrapDisabled\": [\"handleFocusTrapDisabled\"],\n    \"flipPlacements\": [\"flipPlacementsHandler\"],\n    \"messageOverrides\": [\"onMessagesChange\"],\n    \"offsetDistance\": [\"offsetDistanceOffsetHandler\"],\n    \"offsetSkidding\": [\"offsetSkiddingHandler\"],\n    \"open\": [\"openHandler\"],\n    \"overlayPositioning\": [\"overlayPositioningHandler\"],\n    \"placement\": [\"placementHandler\"],\n    \"referenceElement\": [\"referenceElementHandler\"],\n    \"effectiveLocale\": [\"effectiveLocaleChange\"]\n  }; }\n  static get style() { return popoverCss; }\n}, [1, \"calcite-popover\", {\n    \"autoClose\": [516, \"auto-close\"],\n    \"closable\": [516],\n    \"flipDisabled\": [516, \"flip-disabled\"],\n    \"focusTrapDisabled\": [516, \"focus-trap-disabled\"],\n    \"pointerDisabled\": [516, \"pointer-disabled\"],\n    \"flipPlacements\": [16],\n    \"heading\": [1],\n    \"headingLevel\": [514, \"heading-level\"],\n    \"label\": [1],\n    \"messageOverrides\": [1040],\n    \"messages\": [1040],\n    \"offsetDistance\": [514, \"offset-distance\"],\n    \"offsetSkidding\": [514, \"offset-skidding\"],\n    \"open\": [1540],\n    \"overlayPositioning\": [513, \"overlay-positioning\"],\n    \"placement\": [513],\n    \"referenceElement\": [1, \"reference-element\"],\n    \"scale\": [513],\n    \"triggerDisabled\": [516, \"trigger-disabled\"],\n    \"effectiveLocale\": [32],\n    \"floatingLayout\": [32],\n    \"effectiveReferenceElement\": [32],\n    \"defaultMessages\": [32],\n    \"reposition\": [64],\n    \"setFocus\": [64],\n    \"updateFocusTrapElements\": [64]\n  }]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-popover\", \"calcite-action\", \"calcite-icon\", \"calcite-loader\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"calcite-popover\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Popover);\n      }\n      break;\n    case \"calcite-action\":\n      if (!customElements.get(tagName)) {\n        (0,action.d)();\n      }\n      break;\n    case \"calcite-icon\":\n      if (!customElements.get(tagName)) {\n        (0,icon.d)();\n      }\n      break;\n    case \"calcite-loader\":\n      if (!customElements.get(tagName)) {\n        (0,loader.d)();\n      }\n      break;\n  } });\n}\ndefineCustomElement();\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/action-menu.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\n\n\n\n\n\n\n\n\n\nconst action_menu_CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\",\n};\nconst SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\",\n};\nconst ICONS = {\n  menu: \"ellipsis\",\n};\nconst activeAttr = \"data-active\";\n\nconst actionMenuCss = \":host{box-sizing:border-box;display:flex;flex-direction:column;font-size:var(--calcite-font-size-1);color:var(--calcite-ui-text-2)}.menu ::slotted(calcite-action){margin:0.125rem;display:flex;outline-color:transparent}.menu ::slotted(calcite-action[data-active]){outline:2px solid var(--calcite-ui-focus-color, var(--calcite-ui-brand));outline-offset:calc(\\n            2px *\\n            calc(\\n              1 -\\n              2 * clamp(\\n                0,\\n                var(--calcite-ui-focus-offset-invert),\\n                1\\n              )\\n            )\\n          );outline-offset:0px}.default-trigger{position:relative;block-size:100%;flex:0 1 auto;align-self:stretch}slot[name=trigger]::slotted(calcite-action),calcite-action::slotted([slot=trigger]){position:relative;block-size:100%;flex:0 1 auto;align-self:stretch}.menu{flex-direction:column;flex-wrap:nowrap;outline:2px solid transparent;outline-offset:2px}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst SUPPORTED_MENU_NAV_KEYS = [\"ArrowUp\", \"ArrowDown\", \"End\", \"Home\"];\nconst ActionMenu = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calciteActionMenuOpen = (0,client/* createEvent */.yM)(this, \"calciteActionMenuOpen\", 6);\n    this.actionElements = [];\n    this.guid = `calcite-action-menu-${(0,guid.g)()}`;\n    this.menuId = `${this.guid}-menu`;\n    this.menuButtonId = `${this.guid}-menu-button`;\n    // --------------------------------------------------------------------------\n    //\n    //  Component Methods\n    //\n    // --------------------------------------------------------------------------\n    this.connectMenuButtonEl = () => {\n      const { menuButtonId, menuId, open, label } = this;\n      const menuButtonEl = this.slottedMenuButtonEl || this.defaultMenuButtonEl;\n      if (this.menuButtonEl === menuButtonEl) {\n        return;\n      }\n      this.disconnectMenuButtonEl();\n      this.menuButtonEl = menuButtonEl;\n      this.setTooltipReferenceElement();\n      if (!menuButtonEl) {\n        return;\n      }\n      menuButtonEl.active = open;\n      menuButtonEl.setAttribute(\"aria-controls\", menuId);\n      menuButtonEl.setAttribute(\"aria-expanded\", (0,dom.t)(open));\n      menuButtonEl.setAttribute(\"aria-haspopup\", \"true\");\n      if (!menuButtonEl.id) {\n        menuButtonEl.id = menuButtonId;\n      }\n      if (!menuButtonEl.label) {\n        menuButtonEl.label = label;\n      }\n      if (!menuButtonEl.text) {\n        menuButtonEl.text = label;\n      }\n      menuButtonEl.addEventListener(\"pointerdown\", this.menuButtonClick);\n      menuButtonEl.addEventListener(\"keydown\", this.menuButtonKeyDown);\n    };\n    this.disconnectMenuButtonEl = () => {\n      const { menuButtonEl } = this;\n      if (!menuButtonEl) {\n        return;\n      }\n      menuButtonEl.removeEventListener(\"pointerdown\", this.menuButtonClick);\n      menuButtonEl.removeEventListener(\"keydown\", this.menuButtonKeyDown);\n    };\n    this.setMenuButtonEl = (event) => {\n      const actions = event.target\n        .assignedElements({\n        flatten: true,\n      })\n        .filter((el) => el?.matches(\"calcite-action\"));\n      this.slottedMenuButtonEl = actions[0];\n      this.connectMenuButtonEl();\n    };\n    this.setDefaultMenuButtonEl = (el) => {\n      this.defaultMenuButtonEl = el;\n      this.connectMenuButtonEl();\n    };\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.handleCalciteActionClick = () => {\n      this.open = false;\n      this.setFocus();\n    };\n    this.menuButtonClick = (event) => {\n      if (!(0,dom.j)(event)) {\n        return;\n      }\n      this.toggleOpen();\n    };\n    this.updateTooltip = (event) => {\n      const tooltips = event.target\n        .assignedElements({\n        flatten: true,\n      })\n        .filter((el) => el?.matches(\"calcite-tooltip\"));\n      this.tooltipEl = tooltips[0];\n      this.setTooltipReferenceElement();\n    };\n    this.setTooltipReferenceElement = () => {\n      const { tooltipEl, expanded, menuButtonEl, open } = this;\n      if (tooltipEl) {\n        tooltipEl.referenceElement = !expanded && !open ? menuButtonEl : null;\n      }\n    };\n    this.updateAction = (action, index) => {\n      const { guid, activeMenuItemIndex } = this;\n      const id = `${guid}-action-${index}`;\n      action.tabIndex = -1;\n      action.setAttribute(\"role\", \"menuitem\");\n      if (!action.id) {\n        action.id = id;\n      }\n      // data attribute is used to style the \"activeMenuItemIndex\" action using token focus styling.\n      action.toggleAttribute(activeAttr, index === activeMenuItemIndex);\n    };\n    this.updateActions = (actions) => {\n      actions?.forEach(this.updateAction);\n    };\n    this.handleDefaultSlotChange = (event) => {\n      const actions = event.target\n        .assignedElements({\n        flatten: true,\n      })\n        .filter((el) => el?.matches(\"calcite-action\"));\n      this.actionElements = actions;\n    };\n    this.menuButtonKeyDown = (event) => {\n      const { key } = event;\n      const { actionElements, activeMenuItemIndex, open } = this;\n      if (!actionElements.length) {\n        return;\n      }\n      if ((0,components_key.i)(key)) {\n        event.preventDefault();\n        if (!open) {\n          this.toggleOpen();\n          return;\n        }\n        const action = actionElements[activeMenuItemIndex];\n        action ? action.click() : this.toggleOpen(false);\n      }\n      if (key === \"Tab\") {\n        this.open = false;\n        return;\n      }\n      if (key === \"Escape\") {\n        this.toggleOpen(false);\n        event.preventDefault();\n        return;\n      }\n      this.handleActionNavigation(event, key, actionElements);\n    };\n    this.handleActionNavigation = (event, key, actions) => {\n      if (!this.isValidKey(key, SUPPORTED_MENU_NAV_KEYS)) {\n        return;\n      }\n      event.preventDefault();\n      if (!this.open) {\n        this.toggleOpen();\n        if (key === \"Home\" || key === \"ArrowDown\") {\n          this.activeMenuItemIndex = 0;\n        }\n        if (key === \"End\" || key === \"ArrowUp\") {\n          this.activeMenuItemIndex = actions.length - 1;\n        }\n        return;\n      }\n      if (key === \"Home\") {\n        this.activeMenuItemIndex = 0;\n      }\n      if (key === \"End\") {\n        this.activeMenuItemIndex = actions.length - 1;\n      }\n      const currentIndex = this.activeMenuItemIndex;\n      if (key === \"ArrowUp\") {\n        this.activeMenuItemIndex = getRoundRobinIndex(Math.max(currentIndex - 1, -1), actions.length);\n      }\n      if (key === \"ArrowDown\") {\n        this.activeMenuItemIndex = getRoundRobinIndex(currentIndex + 1, actions.length);\n      }\n    };\n    this.toggleOpenEnd = () => {\n      this.setFocus();\n      this.el.removeEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n    };\n    this.toggleOpen = (value = !this.open) => {\n      this.el.addEventListener(\"calcitePopoverOpen\", this.toggleOpenEnd);\n      this.open = value;\n    };\n    this.appearance = \"solid\";\n    this.expanded = false;\n    this.flipPlacements = undefined;\n    this.label = undefined;\n    this.open = false;\n    this.overlayPositioning = \"absolute\";\n    this.placement = \"auto\";\n    this.scale = undefined;\n    this.menuButtonEl = undefined;\n    this.activeMenuItemIndex = -1;\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n  componentWillLoad() {\n    (0,loadable.a)(this);\n  }\n  componentDidLoad() {\n    (0,loadable.s)(this);\n  }\n  disconnectedCallback() {\n    this.disconnectMenuButtonEl();\n  }\n  expandedHandler() {\n    this.open = false;\n    this.setTooltipReferenceElement();\n  }\n  openHandler(open) {\n    this.activeMenuItemIndex = this.open ? 0 : -1;\n    if (this.menuButtonEl) {\n      this.menuButtonEl.active = open;\n    }\n    this.calciteActionMenuOpen.emit();\n    this.setTooltipReferenceElement();\n  }\n  closeCalciteActionMenuOnClick(event) {\n    if (!(0,dom.j)(event)) {\n      return;\n    }\n    const composedPath = event.composedPath();\n    if (composedPath.includes(this.el)) {\n      return;\n    }\n    this.open = false;\n  }\n  activeMenuItemIndexHandler() {\n    this.updateActions(this.actionElements);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n  /** Sets focus on the component. */\n  async setFocus() {\n    await (0,loadable.c)(this);\n    return (0,dom.k)(this.menuButtonEl);\n  }\n  renderMenuButton() {\n    const { appearance, label, scale, expanded } = this;\n    const menuButtonSlot = ((0,client.h)(\"slot\", { name: SLOTS.trigger, onSlotchange: this.setMenuButtonEl }, (0,client.h)(\"calcite-action\", { appearance: appearance, class: action_menu_CSS.defaultTrigger, icon: ICONS.menu, scale: scale, text: label, textEnabled: expanded,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.setDefaultMenuButtonEl })));\n    return menuButtonSlot;\n  }\n  renderMenuItems() {\n    const { actionElements, activeMenuItemIndex, open, menuId, menuButtonEl, label, placement, overlayPositioning, flipPlacements, } = this;\n    const activeAction = actionElements[activeMenuItemIndex];\n    const activeDescendantId = activeAction?.id || null;\n    return ((0,client.h)(\"calcite-popover\", { flipPlacements: flipPlacements, focusTrapDisabled: true, label: label, offsetDistance: 0, open: open, overlayPositioning: overlayPositioning, placement: placement, pointerDisabled: true, referenceElement: menuButtonEl }, (0,client.h)(\"div\", { \"aria-activedescendant\": activeDescendantId, \"aria-labelledby\": menuButtonEl?.id, class: action_menu_CSS.menu, id: menuId, onClick: this.handleCalciteActionClick, role: \"menu\", tabIndex: -1 }, (0,client.h)(\"slot\", { onSlotchange: this.handleDefaultSlotChange }))));\n  }\n  render() {\n    return ((0,client.h)(client/* Fragment */.HY, null, this.renderMenuButton(), this.renderMenuItems(), (0,client.h)(\"slot\", { name: SLOTS.tooltip, onSlotchange: this.updateTooltip })));\n  }\n  isValidKey(key, supportedKeys) {\n    return !!supportedKeys.find((k) => k === key);\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"expanded\": [\"expandedHandler\"],\n    \"open\": [\"openHandler\"],\n    \"activeMenuItemIndex\": [\"activeMenuItemIndexHandler\"]\n  }; }\n  static get style() { return actionMenuCss; }\n}, [1, \"calcite-action-menu\", {\n    \"appearance\": [513],\n    \"expanded\": [516],\n    \"flipPlacements\": [16],\n    \"label\": [1],\n    \"open\": [1540],\n    \"overlayPositioning\": [513, \"overlay-positioning\"],\n    \"placement\": [513],\n    \"scale\": [513],\n    \"menuButtonEl\": [32],\n    \"activeMenuItemIndex\": [32],\n    \"setFocus\": [64]\n  }, [[9, \"pointerdown\", \"closeCalciteActionMenuOnClick\"]]]);\nfunction action_menu_defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-action-menu\", \"calcite-action\", \"calcite-icon\", \"calcite-loader\", \"calcite-popover\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"calcite-action-menu\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, ActionMenu);\n      }\n      break;\n    case \"calcite-action\":\n      if (!customElements.get(tagName)) {\n        (0,action.d)();\n      }\n      break;\n    case \"calcite-icon\":\n      if (!customElements.get(tagName)) {\n        (0,icon.d)();\n      }\n      break;\n    case \"calcite-loader\":\n      if (!customElements.get(tagName)) {\n        (0,loader.d)();\n      }\n      break;\n    case \"calcite-popover\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement();\n      }\n      break;\n  } });\n}\naction_menu_defineCustomElement();\n\n\n\n// EXTERNAL MODULE: ./node_modules/@esri/calcite-components/dist/components/scrim.js\nvar scrim = __webpack_require__(45067);\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/panel.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst panel_CSS = {\n  actionBarContainer: \"action-bar-container\",\n  backButton: \"back-button\",\n  container: \"container\",\n  header: \"header\",\n  headerContainer: \"header-container\",\n  headerContainerBorderEnd: \"header-container--border-end\",\n  heading: \"heading\",\n  summary: \"summary\",\n  description: \"description\",\n  headerContent: \"header-content\",\n  headerActions: \"header-actions\",\n  headerActionsEnd: \"header-actions--end\",\n  headerActionsStart: \"header-actions--start\",\n  contentWrapper: \"content-wrapper\",\n  fabContainer: \"fab-container\",\n  footer: \"footer\",\n};\nconst panel_ICONS = {\n  close: \"x\",\n  menu: \"ellipsis\",\n  backLeft: \"chevron-left\",\n  backRight: \"chevron-right\",\n  expand: \"chevron-down\",\n  collapse: \"chevron-up\",\n};\nconst panel_SLOTS = {\n  actionBar: \"action-bar\",\n  headerActionsStart: \"header-actions-start\",\n  headerActionsEnd: \"header-actions-end\",\n  headerMenuActions: \"header-menu-actions\",\n  headerContent: \"header-content\",\n  fab: \"fab\",\n  footer: \"footer\",\n  footerActions: \"footer-actions\",\n};\n\nconst panelCss = \":host{box-sizing:border-box;background-color:var(--calcite-ui-foreground-1);color:var(--calcite-ui-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:flex;block-size:100%;inline-size:100%;flex:1 1 auto;overflow:hidden;--calcite-min-header-height:calc(var(--calcite-icon-size) * 3)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.header{margin:0px;display:flex;align-content:space-between;align-items:center;fill:var(--calcite-ui-text-2);color:var(--calcite-ui-text-2)}.heading{margin:0px;padding:0px;font-weight:var(--calcite-font-weight-medium)}.header .heading{flex:1 1 auto;padding:0.5rem}.container{margin:0px;display:flex;inline-size:100%;flex:1 1 auto;flex-direction:column;align-items:stretch;background-color:var(--calcite-ui-background);padding:0px;transition:max-block-size var(--calcite-animation-timing), inline-size var(--calcite-animation-timing)}.container[hidden]{display:none}.header{z-index:var(--calcite-app-z-index-header);display:flex;flex-direction:column;background-color:var(--calcite-ui-foreground-1);border-block-end:var(--calcite-panel-header-border-block-end, 1px solid var(--calcite-ui-border-3))}.header-container{display:flex;inline-size:100%;flex-direction:row;align-items:stretch;justify-content:flex-start;flex:0 0 auto}.header-container--border-end{border-block-end:1px solid var(--calcite-ui-border-3)}.action-bar-container{inline-size:100%}.action-bar-container ::slotted(calcite-action-bar){inline-size:100%}.header-content{display:flex;flex-direction:column;overflow:hidden;padding-inline:0.75rem;padding-block:0.875rem;margin-inline-end:auto}.header-content .heading,.header-content .description{display:block;overflow-wrap:break-word;padding:0px}.header-content .heading{margin-inline:0px;margin-block:0px 0.25rem;font-size:var(--calcite-font-size-0);line-height:1.25rem;font-weight:var(--calcite-font-weight-medium)}.header-content .heading:only-child{margin-block-end:0px}.header-content .description{font-size:var(--calcite-font-size--1);line-height:1rem;color:var(--calcite-ui-text-2)}.back-button{border-width:0px;border-style:solid;border-color:var(--calcite-ui-border-3);border-inline-end-width:1px}.header-actions{display:flex;flex-direction:row;flex-wrap:nowrap;align-items:stretch}.header-actions--end{margin-inline-start:auto}.content-wrapper{display:flex;block-size:100%;flex:1 1 auto;flex-direction:column;flex-wrap:nowrap;align-items:stretch;overflow:auto;background-color:var(--calcite-ui-background)}.footer{display:flex;inline-size:100%;justify-content:space-evenly;background-color:var(--calcite-ui-foreground-1);flex:0 0 auto;padding:var(--calcite-panel-footer-padding, 0.5rem);border-block-start:1px solid var(--calcite-ui-border-3)}.fab-container{position:sticky;inset-block-end:0px;z-index:var(--calcite-app-z-index-sticky);margin-block:0px;margin-inline:auto;display:block;padding:0.5rem;inset-inline:0;inline-size:-moz-fit-content;inline-size:fit-content}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst Panel = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calcitePanelClose = (0,client/* createEvent */.yM)(this, \"calcitePanelClose\", 6);\n    this.calcitePanelToggle = (0,client/* createEvent */.yM)(this, \"calcitePanelToggle\", 6);\n    this.calcitePanelScroll = (0,client/* createEvent */.yM)(this, \"calcitePanelScroll\", 6);\n    this.resizeObserver = (0,observers.c)(\"resize\", () => this.resizeHandler());\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.resizeHandler = () => {\n      const { panelScrollEl } = this;\n      if (!panelScrollEl ||\n        typeof panelScrollEl.scrollHeight !== \"number\" ||\n        typeof panelScrollEl.offsetHeight !== \"number\") {\n        return;\n      }\n      panelScrollEl.tabIndex = panelScrollEl.scrollHeight > panelScrollEl.offsetHeight ? 0 : -1;\n    };\n    this.setContainerRef = (node) => {\n      this.containerEl = node;\n    };\n    this.panelKeyDownHandler = (event) => {\n      if (this.closable && event.key === \"Escape\" && !event.defaultPrevented) {\n        this.close();\n        event.preventDefault();\n      }\n    };\n    this.close = () => {\n      this.closed = true;\n      this.calcitePanelClose.emit();\n    };\n    this.collapse = () => {\n      this.collapsed = !this.collapsed;\n      this.calcitePanelToggle.emit();\n    };\n    this.panelScrollHandler = () => {\n      this.calcitePanelScroll.emit();\n    };\n    this.handleHeaderActionsStartSlotChange = (event) => {\n      this.hasStartActions = (0,dom.e)(event);\n    };\n    this.handleHeaderActionsEndSlotChange = (event) => {\n      this.hasEndActions = (0,dom.e)(event);\n    };\n    this.handleHeaderMenuActionsSlotChange = (event) => {\n      this.hasMenuItems = (0,dom.e)(event);\n    };\n    this.handleActionBarSlotChange = (event) => {\n      const actionBars = (0,dom.s)(event).filter((el) => el?.matches(\"calcite-action-bar\"));\n      actionBars.forEach((actionBar) => (actionBar.layout = \"horizontal\"));\n      this.hasActionBar = !!actionBars.length;\n    };\n    this.handleHeaderContentSlotChange = (event) => {\n      this.hasHeaderContent = (0,dom.e)(event);\n    };\n    this.handleFooterSlotChange = (event) => {\n      this.hasFooterContent = (0,dom.e)(event);\n    };\n    this.handleFooterActionsSlotChange = (event) => {\n      this.hasFooterActions = (0,dom.e)(event);\n    };\n    this.handleFabSlotChange = (event) => {\n      this.hasFab = (0,dom.e)(event);\n    };\n    this.setPanelScrollEl = (el) => {\n      this.panelScrollEl = el;\n      this.resizeObserver?.disconnect();\n      if (el) {\n        this.resizeObserver?.observe(el);\n        this.resizeHandler();\n      }\n    };\n    this.closed = false;\n    this.disabled = false;\n    this.closable = false;\n    this.collapsed = false;\n    this.collapseDirection = \"down\";\n    this.collapsible = false;\n    this.headingLevel = undefined;\n    this.loading = false;\n    this.heading = undefined;\n    this.description = undefined;\n    this.menuOpen = false;\n    this.messageOverrides = undefined;\n    this.messages = undefined;\n    this.hasStartActions = false;\n    this.hasEndActions = false;\n    this.hasMenuItems = false;\n    this.hasHeaderContent = false;\n    this.hasActionBar = false;\n    this.hasFooterContent = false;\n    this.hasFooterActions = false;\n    this.hasFab = false;\n    this.defaultMessages = undefined;\n    this.effectiveLocale = \"\";\n    this.showHeaderContent = false;\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    (0,interactive.c)(this);\n    (0,locale.c)(this);\n    (0,t9n.c)(this);\n  }\n  async componentWillLoad() {\n    (0,loadable.a)(this);\n    await (0,t9n.s)(this);\n  }\n  componentDidLoad() {\n    (0,loadable.s)(this);\n  }\n  componentDidRender() {\n    (0,interactive.u)(this);\n  }\n  disconnectedCallback() {\n    (0,interactive.d)(this);\n    (0,locale.d)(this);\n    (0,t9n.d)(this);\n    this.resizeObserver?.disconnect();\n  }\n  effectiveLocaleChange() {\n    (0,t9n.u)(this, this.effectiveLocale);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  async setFocus() {\n    await (0,loadable.c)(this);\n    (0,dom.f)(this.containerEl);\n  }\n  /**\n   * Scrolls the component's content to a specified set of coordinates.\n   *\n   * @example\n   * myCalciteFlowItem.scrollContentTo({\n   *   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n   *   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n   *   behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n   * });\n   * @param options - allows specific coordinates to be defined.\n   * @returns - promise that resolves once the content is scrolled to.\n   */\n  async scrollContentTo(options) {\n    this.panelScrollEl?.scrollTo(options);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n  renderHeaderContent() {\n    const { heading, headingLevel, description, hasHeaderContent } = this;\n    const headingNode = heading ? ((0,client.h)(Heading, { class: panel_CSS.heading, level: headingLevel }, heading)) : null;\n    const descriptionNode = description ? (0,client.h)(\"span\", { class: panel_CSS.description }, description) : null;\n    return !hasHeaderContent && (headingNode || descriptionNode) ? ((0,client.h)(\"div\", { class: panel_CSS.headerContent, key: \"header-content\" }, headingNode, descriptionNode)) : null;\n  }\n  renderActionBar() {\n    return ((0,client.h)(\"div\", { class: panel_CSS.actionBarContainer, hidden: !this.hasActionBar }, (0,client.h)(\"slot\", { name: panel_SLOTS.actionBar, onSlotchange: this.handleActionBarSlotChange })));\n  }\n  renderHeaderSlottedContent() {\n    return ((0,client.h)(\"div\", { class: panel_CSS.headerContent, hidden: !this.hasHeaderContent, key: \"slotted-header-content\" }, (0,client.h)(\"slot\", { name: panel_SLOTS.headerContent, onSlotchange: this.handleHeaderContentSlotChange })));\n  }\n  renderHeaderStartActions() {\n    const { hasStartActions } = this;\n    return ((0,client.h)(\"div\", { class: { [panel_CSS.headerActionsStart]: true, [panel_CSS.headerActions]: true }, hidden: !hasStartActions, key: \"header-actions-start\" }, (0,client.h)(\"slot\", { name: panel_SLOTS.headerActionsStart, onSlotchange: this.handleHeaderActionsStartSlotChange })));\n  }\n  renderHeaderActionsEnd() {\n    const { hasEndActions, messages, closable, collapsed, collapseDirection, collapsible, hasMenuItems, } = this;\n    const { collapse, expand, close } = messages;\n    const icons = [panel_ICONS.expand, panel_ICONS.collapse];\n    if (collapseDirection === \"up\") {\n      icons.reverse();\n    }\n    const collapseNode = collapsible ? ((0,client.h)(\"calcite-action\", { \"aria-expanded\": (0,dom.t)(!collapsed), \"aria-label\": collapse, \"data-test\": \"collapse\", icon: collapsed ? icons[0] : icons[1], onClick: this.collapse, text: collapse, title: collapsed ? expand : collapse })) : null;\n    const closeNode = closable ? ((0,client.h)(\"calcite-action\", { \"aria-label\": close, \"data-test\": \"close\", icon: panel_ICONS.close, onClick: this.close, text: close, title: close })) : null;\n    const slotNode = ((0,client.h)(\"slot\", { name: panel_SLOTS.headerActionsEnd, onSlotchange: this.handleHeaderActionsEndSlotChange }));\n    const showContainer = hasEndActions || collapseNode || closeNode || hasMenuItems;\n    return ((0,client.h)(\"div\", { class: { [panel_CSS.headerActionsEnd]: true, [panel_CSS.headerActions]: true }, hidden: !showContainer, key: \"header-actions-end\" }, slotNode, this.renderMenu(), collapseNode, closeNode));\n  }\n  renderMenu() {\n    const { hasMenuItems, messages, menuOpen } = this;\n    return ((0,client.h)(\"calcite-action-menu\", { flipPlacements: [\"top\", \"bottom\"], hidden: !hasMenuItems, key: \"menu\", label: messages.options, open: menuOpen, placement: \"bottom-end\" }, (0,client.h)(\"calcite-action\", { icon: panel_ICONS.menu, slot: SLOTS.trigger, text: messages.options }), (0,client.h)(\"slot\", { name: panel_SLOTS.headerMenuActions, onSlotchange: this.handleHeaderMenuActionsSlotChange })));\n  }\n  renderHeaderNode() {\n    const { hasHeaderContent, hasStartActions, hasEndActions, closable, collapsible, hasMenuItems, hasActionBar, } = this;\n    const headerContentNode = this.renderHeaderContent();\n    const showHeaderContent = hasHeaderContent ||\n      !!headerContentNode ||\n      hasStartActions ||\n      hasEndActions ||\n      collapsible ||\n      closable ||\n      hasMenuItems;\n    this.showHeaderContent = showHeaderContent;\n    return ((0,client.h)(\"header\", { class: panel_CSS.header, hidden: !(showHeaderContent || hasActionBar) }, (0,client.h)(\"div\", { class: { [panel_CSS.headerContainer]: true, [panel_CSS.headerContainerBorderEnd]: hasActionBar }, hidden: !showHeaderContent }, this.renderHeaderStartActions(), this.renderHeaderSlottedContent(), headerContentNode, this.renderHeaderActionsEnd()), this.renderActionBar()));\n  }\n  renderFooterNode() {\n    const { hasFooterContent, hasFooterActions } = this;\n    const showFooter = hasFooterContent || hasFooterActions;\n    return ((0,client.h)(\"footer\", { class: panel_CSS.footer, hidden: !showFooter }, (0,client.h)(\"slot\", { key: \"footer-slot\", name: panel_SLOTS.footer, onSlotchange: this.handleFooterSlotChange }), (0,client.h)(\"slot\", { key: \"footer-actions-slot\", name: panel_SLOTS.footerActions, onSlotchange: this.handleFooterActionsSlotChange })));\n  }\n  renderContent() {\n    return ((0,client.h)(\"div\", { class: panel_CSS.contentWrapper, hidden: this.collapsible && this.collapsed, onScroll: this.panelScrollHandler,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.setPanelScrollEl }, (0,client.h)(\"slot\", null), this.renderFab()));\n  }\n  renderFab() {\n    return ((0,client.h)(\"div\", { class: panel_CSS.fabContainer, hidden: !this.hasFab }, (0,client.h)(\"slot\", { name: panel_SLOTS.fab, onSlotchange: this.handleFabSlotChange })));\n  }\n  render() {\n    const { loading, panelKeyDownHandler, closed, closable } = this;\n    const panelNode = ((0,client.h)(\"article\", { \"aria-busy\": (0,dom.t)(loading), class: panel_CSS.container, hidden: closed, onKeyDown: panelKeyDownHandler, tabIndex: closable ? 0 : -1,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.setContainerRef }, this.renderHeaderNode(), this.renderContent(), this.renderFooterNode()));\n    return ((0,client.h)(client/* Fragment */.HY, null, loading ? (0,client.h)(\"calcite-scrim\", { loading: loading }) : null, panelNode));\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  get el() { return this; }\n  static get watchers() { return {\n    \"messageOverrides\": [\"onMessagesChange\"],\n    \"effectiveLocale\": [\"effectiveLocaleChange\"]\n  }; }\n  static get style() { return panelCss; }\n}, [1, \"calcite-panel\", {\n    \"closed\": [1540],\n    \"disabled\": [516],\n    \"closable\": [516],\n    \"collapsed\": [516],\n    \"collapseDirection\": [1, \"collapse-direction\"],\n    \"collapsible\": [516],\n    \"headingLevel\": [514, \"heading-level\"],\n    \"loading\": [516],\n    \"heading\": [1],\n    \"description\": [1],\n    \"menuOpen\": [516, \"menu-open\"],\n    \"messageOverrides\": [1040],\n    \"messages\": [1040],\n    \"hasStartActions\": [32],\n    \"hasEndActions\": [32],\n    \"hasMenuItems\": [32],\n    \"hasHeaderContent\": [32],\n    \"hasActionBar\": [32],\n    \"hasFooterContent\": [32],\n    \"hasFooterActions\": [32],\n    \"hasFab\": [32],\n    \"defaultMessages\": [32],\n    \"effectiveLocale\": [32],\n    \"showHeaderContent\": [32],\n    \"setFocus\": [64],\n    \"scrollContentTo\": [64]\n  }]);\nfunction panel_defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-panel\", \"calcite-action\", \"calcite-action-menu\", \"calcite-icon\", \"calcite-loader\", \"calcite-popover\", \"calcite-scrim\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"calcite-panel\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Panel);\n      }\n      break;\n    case \"calcite-action\":\n      if (!customElements.get(tagName)) {\n        (0,action.d)();\n      }\n      break;\n    case \"calcite-action-menu\":\n      if (!customElements.get(tagName)) {\n        action_menu_defineCustomElement();\n      }\n      break;\n    case \"calcite-icon\":\n      if (!customElements.get(tagName)) {\n        (0,icon.d)();\n      }\n      break;\n    case \"calcite-loader\":\n      if (!customElements.get(tagName)) {\n        (0,loader.d)();\n      }\n      break;\n    case \"calcite-popover\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement();\n      }\n      break;\n    case \"calcite-scrim\":\n      if (!customElements.get(tagName)) {\n        (0,scrim.d)();\n      }\n      break;\n  } });\n}\npanel_defineCustomElement();\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@esri/calcite-components/dist/components/calcite-flow-item.js\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst calcite_flow_item_CSS = {\n  backButton: \"back-button\",\n};\nconst calcite_flow_item_ICONS = {\n  backLeft: \"chevron-left\",\n  backRight: \"chevron-right\",\n};\nconst calcite_flow_item_SLOTS = {\n  actionBar: \"action-bar\",\n  headerActionsStart: \"header-actions-start\",\n  headerActionsEnd: \"header-actions-end\",\n  headerMenuActions: \"header-menu-actions\",\n  headerContent: \"header-content\",\n  fab: \"fab\",\n  footer: \"footer\",\n  footerActions: \"footer-actions\",\n};\n\nconst flowItemCss = \":host{box-sizing:border-box;background-color:var(--calcite-ui-foreground-1);color:var(--calcite-ui-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:flex;inline-size:100%;flex:1 1 auto;overflow:hidden}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.back-button{border-width:0px;border-style:solid;border-color:var(--calcite-ui-border-3);border-inline-end-width:1px}calcite-panel{--calcite-panel-footer-padding:var(--calcite-flow-item-footer-padding);--calcite-panel-header-border-block-end:var(--calcite-flow-item-header-border-block-end)}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst FlowItem = /*@__PURE__*/ (0,client/* proxyCustomElement */.GH)(class extends client/* HTMLElement */.mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.calciteFlowItemBack = (0,client/* createEvent */.yM)(this, \"calciteFlowItemBack\", 7);\n    this.calciteFlowItemScroll = (0,client/* createEvent */.yM)(this, \"calciteFlowItemScroll\", 6);\n    this.calciteFlowItemClose = (0,client/* createEvent */.yM)(this, \"calciteFlowItemClose\", 6);\n    this.calciteFlowItemToggle = (0,client/* createEvent */.yM)(this, \"calciteFlowItemToggle\", 6);\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.handlePanelScroll = (event) => {\n      event.stopPropagation();\n      this.calciteFlowItemScroll.emit();\n    };\n    this.handlePanelClose = (event) => {\n      event.stopPropagation();\n      this.calciteFlowItemClose.emit();\n    };\n    this.handlePanelToggle = (event) => {\n      event.stopPropagation();\n      this.collapsed = event.target.collapsed;\n      this.calciteFlowItemToggle.emit();\n    };\n    this.backButtonClick = () => {\n      this.calciteFlowItemBack.emit();\n    };\n    this.setBackRef = (node) => {\n      this.backButtonEl = node;\n    };\n    this.setContainerRef = (node) => {\n      this.containerEl = node;\n    };\n    this.closable = false;\n    this.closed = false;\n    this.collapsed = false;\n    this.collapseDirection = \"down\";\n    this.collapsible = false;\n    this.beforeBack = undefined;\n    this.description = undefined;\n    this.disabled = false;\n    this.heading = undefined;\n    this.headingLevel = undefined;\n    this.loading = false;\n    this.menuOpen = false;\n    this.messageOverrides = undefined;\n    this.messages = undefined;\n    this.showBackButton = false;\n    this.defaultMessages = undefined;\n    this.effectiveLocale = \"\";\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    (0,interactive.c)(this);\n    (0,locale.c)(this);\n    (0,t9n.c)(this);\n  }\n  async componentWillLoad() {\n    await (0,t9n.s)(this);\n    (0,loadable.a)(this);\n  }\n  componentDidRender() {\n    (0,interactive.u)(this);\n  }\n  disconnectedCallback() {\n    (0,interactive.d)(this);\n    (0,locale.d)(this);\n    (0,t9n.d)(this);\n  }\n  componentDidLoad() {\n    (0,loadable.s)(this);\n  }\n  effectiveLocaleChange() {\n    (0,t9n.u)(this, this.effectiveLocale);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n  /**\n   * Sets focus on the component.\n   *\n   * @returns promise.\n   */\n  async setFocus() {\n    await (0,loadable.c)(this);\n    const { backButtonEl, containerEl } = this;\n    if (backButtonEl) {\n      return backButtonEl.setFocus();\n    }\n    else if (containerEl) {\n      return containerEl.setFocus();\n    }\n  }\n  /**\n   * Scrolls the component's content to a specified set of coordinates.\n   *\n   * @example\n   * myCalciteFlowItem.scrollContentTo({\n   *   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n   *   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n   *   behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n   * });\n   * @param options - allows specific coordinates to be defined.\n   * @returns - promise that resolves once the content is scrolled to.\n   */\n  async scrollContentTo(options) {\n    await this.containerEl?.scrollContentTo(options);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n  renderBackButton() {\n    const { el } = this;\n    const rtl = (0,dom.b)(el) === \"rtl\";\n    const { showBackButton, backButtonClick, messages } = this;\n    const label = messages.back;\n    const icon = rtl ? calcite_flow_item_ICONS.backRight : calcite_flow_item_ICONS.backLeft;\n    return showBackButton ? ((0,client.h)(\"calcite-action\", { \"aria-label\": label, class: calcite_flow_item_CSS.backButton, icon: icon, key: \"flow-back-button\", onClick: backButtonClick, scale: \"s\", slot: \"header-actions-start\", text: label, title: label,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.setBackRef })) : null;\n  }\n  render() {\n    const { collapsed, collapseDirection, collapsible, closable, closed, description, disabled, heading, headingLevel, loading, menuOpen, messages, } = this;\n    return ((0,client.h)(client/* Host */.AA, null, (0,client.h)(\"calcite-panel\", { closable: closable, closed: closed, collapseDirection: collapseDirection, collapsed: collapsed, collapsible: collapsible, description: description, disabled: disabled, heading: heading, headingLevel: headingLevel, loading: loading, menuOpen: menuOpen, messageOverrides: messages, onCalcitePanelClose: this.handlePanelClose, onCalcitePanelScroll: this.handlePanelScroll, onCalcitePanelToggle: this.handlePanelToggle,\n      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n      ref: this.setContainerRef }, this.renderBackButton(), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.actionBar, slot: panel_SLOTS.actionBar }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.headerActionsStart, slot: panel_SLOTS.headerActionsStart }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.headerActionsEnd, slot: panel_SLOTS.headerActionsEnd }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.headerContent, slot: panel_SLOTS.headerContent }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.headerMenuActions, slot: panel_SLOTS.headerMenuActions }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.fab, slot: panel_SLOTS.fab }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.footerActions, slot: panel_SLOTS.footerActions }), (0,client.h)(\"slot\", { name: calcite_flow_item_SLOTS.footer, slot: panel_SLOTS.footer }), (0,client.h)(\"slot\", null))));\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  get el() { return this; }\n  static get watchers() { return {\n    \"messageOverrides\": [\"onMessagesChange\"],\n    \"effectiveLocale\": [\"effectiveLocaleChange\"]\n  }; }\n  static get style() { return flowItemCss; }\n}, [1, \"calcite-flow-item\", {\n    \"closable\": [516],\n    \"closed\": [516],\n    \"collapsed\": [516],\n    \"collapseDirection\": [1, \"collapse-direction\"],\n    \"collapsible\": [516],\n    \"beforeBack\": [16],\n    \"description\": [1],\n    \"disabled\": [516],\n    \"heading\": [1],\n    \"headingLevel\": [514, \"heading-level\"],\n    \"loading\": [516],\n    \"menuOpen\": [516, \"menu-open\"],\n    \"messageOverrides\": [1040],\n    \"messages\": [1040],\n    \"showBackButton\": [4, \"show-back-button\"],\n    \"defaultMessages\": [32],\n    \"effectiveLocale\": [32],\n    \"setFocus\": [64],\n    \"scrollContentTo\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-flow-item\", \"calcite-action\", \"calcite-action-menu\", \"calcite-icon\", \"calcite-loader\", \"calcite-panel\", \"calcite-popover\", \"calcite-scrim\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"calcite-flow-item\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, FlowItem);\n      }\n      break;\n    case \"calcite-action\":\n      if (!customElements.get(tagName)) {\n        (0,action.d)();\n      }\n      break;\n    case \"calcite-action-menu\":\n      if (!customElements.get(tagName)) {\n        action_menu_defineCustomElement();\n      }\n      break;\n    case \"calcite-icon\":\n      if (!customElements.get(tagName)) {\n        (0,icon.d)();\n      }\n      break;\n    case \"calcite-loader\":\n      if (!customElements.get(tagName)) {\n        (0,loader.d)();\n      }\n      break;\n    case \"calcite-panel\":\n      if (!customElements.get(tagName)) {\n        panel_defineCustomElement();\n      }\n      break;\n    case \"calcite-popover\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement();\n      }\n      break;\n    case \"calcite-scrim\":\n      if (!customElements.get(tagName)) {\n        (0,scrim.d)();\n      }\n      break;\n  } });\n}\ndefineCustomElement$1();\n\nconst CalciteFlowItem = FlowItem;\nconst calcite_flow_item_defineCustomElement = defineCustomElement$1;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60547\n");

/***/ }),

/***/ 45067:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   d: () => (/* binding */ defineCustomElement)\n/* harmony export */ });\n/* unused harmony export S */\n/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(77210);\n/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19417);\n/* harmony import */ var _t9n_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53801);\n/* harmony import */ var _observers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85545);\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79145);\n/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92708);\n/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n\n\n\n\n\n\n\nconst CSS = {\n  scrim: \"scrim\",\n  content: \"content\",\n};\nconst BREAKPOINTS = {\n  s: 72,\n  // medium is assumed default.\n  l: 480, // Greater than or equal to 480px.\n};\n\nconst scrimCss = \":host{position:absolute;inset:0px;z-index:var(--calcite-app-z-index-overlay);display:flex;block-size:100%;inline-size:100%;flex-direction:column;align-items:stretch}@keyframes calcite-scrim-fade-in{0%{--tw-bg-opacity:0}100%{--tw-text-opacity:1}}.scrim{position:absolute;inset:0px;display:flex;flex-direction:column;align-content:center;align-items:center;justify-content:center;overflow:hidden;animation:calcite-scrim-fade-in var(--calcite-internal-animation-timing-medium) ease-in-out;background-color:var(--calcite-scrim-background, var(--calcite-scrim-background-internal))}.content{padding:1rem}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst Scrim = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__/* .proxyCustomElement */ .GH)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__/* .HTMLElement */ .mv {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.resizeObserver = (0,_observers_js__WEBPACK_IMPORTED_MODULE_5__.c)(\"resize\", () => this.handleResize());\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.handleDefaultSlotChange = (event) => {\n      this.hasContent = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.u)(event);\n    };\n    this.storeLoaderEl = (el) => {\n      this.loaderEl = el;\n      this.handleResize();\n    };\n    this.loading = false;\n    this.messages = undefined;\n    this.messageOverrides = undefined;\n    this.loaderScale = undefined;\n    this.defaultMessages = undefined;\n    this.effectiveLocale = \"\";\n    this.hasContent = false;\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  effectiveLocaleChange() {\n    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_1__.u)(this, this.effectiveLocale);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    (0,_locale_js__WEBPACK_IMPORTED_MODULE_0__.c)(this);\n    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_1__.c)(this);\n    this.resizeObserver?.observe(this.el);\n  }\n  async componentWillLoad() {\n    await (0,_t9n_js__WEBPACK_IMPORTED_MODULE_1__.s)(this);\n  }\n  disconnectedCallback() {\n    (0,_locale_js__WEBPACK_IMPORTED_MODULE_0__.d)(this);\n    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);\n    this.resizeObserver?.disconnect();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Render Method\n  //\n  // --------------------------------------------------------------------------\n  render() {\n    const { hasContent, loading, messages } = this;\n    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.h)(\"div\", { class: CSS.scrim }, loading ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.h)(\"calcite-loader\", { label: messages.loading, ref: this.storeLoaderEl, scale: this.loaderScale })) : null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.h)(\"div\", { class: CSS.content, hidden: !hasContent }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.h)(\"slot\", { onSlotchange: this.handleDefaultSlotChange }))));\n  }\n  getScale(size) {\n    if (size < BREAKPOINTS.s) {\n      return \"s\";\n    }\n    else if (size >= BREAKPOINTS.l) {\n      return \"l\";\n    }\n    else {\n      return \"m\";\n    }\n  }\n  handleResize() {\n    const { loaderEl, el } = this;\n    if (!loaderEl) {\n      return;\n    }\n    this.loaderScale = this.getScale(Math.min(el.clientHeight, el.clientWidth) ?? 0);\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  get el() { return this; }\n  static get watchers() { return {\n    \"messageOverrides\": [\"onMessagesChange\"],\n    \"effectiveLocale\": [\"effectiveLocaleChange\"]\n  }; }\n  static get style() { return scrimCss; }\n}, [1, \"calcite-scrim\", {\n    \"loading\": [516],\n    \"messages\": [1040],\n    \"messageOverrides\": [1040],\n    \"loaderScale\": [32],\n    \"defaultMessages\": [32],\n    \"effectiveLocale\": [32],\n    \"hasContent\": [32]\n  }]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"calcite-scrim\", \"calcite-loader\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"calcite-scrim\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Scrim);\n      }\n      break;\n    case \"calcite-loader\":\n      if (!customElements.get(tagName)) {\n        (0,_loader_js__WEBPACK_IMPORTED_MODULE_3__.d)();\n      }\n      break;\n  } });\n}\ndefineCustomElement();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45067\n");

/***/ })

}]);